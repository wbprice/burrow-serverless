service: remotes

plugins:
    - serverless-offline

provider:
  name: aws
  runtime: nodejs6.10
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    USER_POOL_ID: "us-east-1_zQitSgr2g"
    CLIENT_ID: "2cu6nb45dknrkvtvre202906q8"
    IDENTITY_POOL_ID: "us-east-1:99c230af-7c8d-408d-8b6a-d90ee543f459"

functions:
  create:
    handler: handler.create
    events:
      - http:
          path: remotes
          method: post
          cors:
            origin: '*'
            headers:
              - Authorization

  read:
    handler: handler.read
    events:
      - http:
          path: remotes
          method: get
          cors: 
            origin: '*'
            headers:
              - Authorization
  
  update:
    handler: handler.update
    events:
      - http: 
          path: remotes/{id}
          method: put
          cors:
            origin: '*'
            headers:
              - Authorization

  delete:
    handler: handler.delete
    events:
      - http:
          path: remotes/{id}
          method: delete
          cors:
            origin: '*'
            headers:
              - Authorization

resources:
  Resources:
    RemotesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: temperature
            AttributeType: N
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
          - AttributeName: name 
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
